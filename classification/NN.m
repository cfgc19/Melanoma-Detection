% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 23-Dec-2016 16:48:00
%
% This script assumes these variables are defined:
%
%   cores - input data.
%   labels - target data.

load('total_features.mat');
load('labels.mat');

x = total';
t = labels';

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.

% Create a Fitting Network
hiddenLayerSize = 22;
net = fitnet(hiddenLayerSize,trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 50/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 35/100;

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y);

% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotregression(t,y)
%figure, plotfit(net,x,t)

%%
for i=1:length(e)
    if e(i)<0.51
        normalizado(i,1)=0;
    else
        normalizado(i,1)=1;
    end
end
%%
TP= numel(find(normalizado==0 & labels==0)==1); % True positive
FP = numel(find(normalizado==1 & labels==0)==1); % False positive
TN = numel(find(normalizado==1 & labels==1)==1); % True negative
FN = numel(find(normalizado==0 & labels==1)==1); % False negative

P = TP + FN; % Total positive for the true class ? reference)
N = FP + TN; % TOtal negative for the true class ? reference)
precision = TP/(TP+FP);
accuracy = (TP+TN)/(P+N);

sensitivity=TP/(TP+FN)
specificity=TN/(TN+FP)

